
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
import logging

API_TOKEN = '8179992230:AAEfAZTD6MYyHWgESBvaB3_sur85Qrn9Chk'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

conn = sqlite3.connect('orders.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS orders
             (id INTEGER PRIMARY KEY, description TEXT, accepted_by TEXT, price INTEGER)''')
conn.commit()

# –ö–æ–º–∞–Ω–¥–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
@dp.message_handler(commands=['add'])
async def add_order(message: types.Message):
    text = message.get_args()
    if not text:
        await message.reply("–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: /add –ó–∞–º—ñ–Ω–∞ —Ä–æ–∑–µ—Ç–∫–∏")
        return

    c.execute("INSERT INTO orders (description, accepted_by, price) VALUES (?, ?, ?)", (text, None, None))
    order_id = c.lastrowid
    conn.commit()

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–∏", callback_data=f"accept_{order_id}")
    )
    await bot.send_message(chat_id='@your_channel_username', text=f"üîß –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order_id}
{text}", reply_markup=keyboard)

# –ü—Ä–∏–π–Ω—è—Ç—Ç—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
@dp.callback_query_handler(lambda c: c.data.startswith('accept_'))
async def accept_order(callback_query: types.CallbackQuery):
    order_id = int(callback_query.data.split("_")[1])
    username = callback_query.from_user.username or callback_query.from_user.full_name

    c.execute("SELECT accepted_by FROM orders WHERE id=?", (order_id,))
    row = c.fetchone()
    if row and row[0]:
        await callback_query.answer("–¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ —Ö—Ç–æ—Å—å –≤–∑—è–≤!", show_alert=True)
        return

    c.execute("UPDATE orders SET accepted_by=? WHERE id=?", (username, order_id))
    conn.commit()

    await callback_query.message.edit_reply_markup(reply_markup=None)
    await bot.send_message(callback_query.from_user.id, f"üîí –í–∏ –ø—Ä–∏–π–Ω—è–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}")
    await callback_query.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!")

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
@dp.message_handler(commands=['done'])
async def finish_order(message: types.Message):
    args = message.get_args().split()
    if len(args) != 2:
        await message.reply("–ü—Ä–∏–∫–ª–∞–¥: /done 5 1200")
        return

    order_id, price = args
    username = message.from_user.username or message.from_user.full_name

    c.execute("SELECT accepted_by FROM orders WHERE id=?", (order_id,))
    row = c.fetchone()
    if not row:
        await message.reply("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    if row[0] != username:
        await message.reply("–¶–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–º–∞–≤ —ñ–Ω—à–∏–π –º–∞–π—Å—Ç–µ—Ä.")
        return

    c.execute("UPDATE orders SET price=? WHERE id=?", (price, order_id))
    conn.commit()
    await message.reply(f"‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞—Ä–æ–±–ª–µ–Ω–æ {price} –≥—Ä–Ω.")

# –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å
@dp.message_handler(commands=['all'])
async def list_orders(message: types.Message):
    c.execute("SELECT * FROM orders")
    orders = c.fetchall()
    if not orders:
        await message.reply("–ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        return

    text = ""
    for o in orders:
        text += f"#{o[0]} | {o[1]}
–ü—Ä–∏–π–Ω—è–≤: {o[2] or '‚ùå'} | –°—É–º–∞: {o[3] or '‚ùå'} –≥—Ä–Ω

"
    await message.reply(text)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
